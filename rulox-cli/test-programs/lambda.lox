
// variables
// functions
// applications of functions to other stuff
// λx...

λ zerotimes(fn) {
  fun fn2(x){
    return x;
  }
  return fn2;
}

λ twotimes(fn) {
  fun fn2(x){
    return fn (fn (x));
  }
  return fn2;
}

λ threetimes(fn) {
  fun fn2(return){
    x fn (fn (fn (x)));
  }
  return fn2;
}

fun inc(x) {
  return x + 1;
}

var ZERO = zerotimes(inc)(0);
var TWO = twotimes(inc)(0);
var THREE = threetimes(inc)(0);

// TRUE == λx.λy.x  => fun(x,y) => x
// FALSE == λx.λy.y  => fun(x,y) => y
λ TRUE(x) {
  fun g(y) {
    return x;
  }
  return g;
}

λ FALSE(x) {
  fun g(y) {
    return y;
  }
  return g;
}

fun PAIR(h) {
    fun g(t) {
        fun selector(f) {
            return f(h)(t);
        }
        return h;
    }
    return g;
}

fun hd(cons) {
    return cons(TRUE);
}

fun tl(cons) {
    return cons(FALSE);
}

λ CONS(h) {
  fun g(t) {
    fun selector(bool) {
      return bool(h)(t);
    }
    return selector;
  }
  return g;
}

fun NIL(x) {
    return TRUE;
}

fun ISEMPTY(list) {
/*    What's REALLY going on:
    fun h(x) {
        fun t(y) {
            return FALSE;
        }
        return t;
    }
*/
    return list(TRUE(TRUE(FALSE)));
}

fun EMPTY(x) {
  return x;
}

fun IF(condition, then_f, else_f) {
  condition(then_f)(else_f)(TRUE);
}

// if elem == nil / do nothing / else / print head, printfun(tail)
fun printcons(cons) {
  fun ELSE(x) {
    print hd(cons);
    printcons(tl(cons));
  }
  return ISEMPTY(cons)(EMPTY)(ELSE)(TRUE);
}

fun printcons2(cons) {
  fun ELSE(x) {
    print hd(cons);
    printcons(tl(cons));
  }
  IF(ISEMPTY(cons), EMPTY, ELSE);
}

var pair = CONS(THREE)(TWO);

var list = CONS(1)(CONS(2)(CONS(3)(CONS(4)(NIL))));
printcons(list);
// printcons2(list);
